#!/bin/sh
# scr scr scr scr for scr
#  Super CRappy SCReenshot & SCreen Recording SCRipt for Sound Cloud Rappers
#  MIT License, 6gk/gk/gtk
#
# some notes:
#  - inconsistent use of : and # for comments is due to : appearing
#    when using the '-x' shell option, making it easier to debug
#

# saving & pidfile
[ "$1" = "-s" ] && exec pkill -x "${0##*/}"

trap ':' INT  # leaving the command empty produces weird behavior on bash.  6gk/scr#3
trap 'kill $pid' TERM

# clean environment
unset var confirm select geometry display rate profile audio nvenc extra
oIFS="$IFS"

eval \
	scr_dir="${scr_dir:-$PWD}"  scr_file="${scr_file:-$(date '+%Y-%m-%d_%H-%M-%S').png}" \
	rec_dir="${rec_dir:-$PWD}"  rec_file="${rec_file:-$(date '+%Y-%m-%d_%H-%M-%S').mp4}"

output=$rec_dir/$rec_file



help() {
exec cat << EOF
scr (scr scr scr scr for scr)
Super CRappy SCReenshot & SCreen Recording SCRipt for Sound Cloud Rappers

examples
 # select an area and record at 30fps
 scr -c -e
 # record from display HDMI-0 at 60fps, use profile 'wnd', and save as file.mp4
 scr -c -mHDMI-0 -r60 -pwnd file.mp4

options
 screenshots
  -S     selection
  -P     primary display
  -G     custom geometry
 recording
  -s     save
  -e     select
  -m:    monitor
  -g:    custom geometry
  -r:    framerate
  -b:    bitrate (in megabits)
  -p:    profile
  -x:    extra arg to pass to ffmpeg
  -a::   audio   (optional arg for changing pulse device)
  -c     don't confirm when starting
:  = arg is required, ex: '-r60'

variables:
 scr_dir,  rec_dir
 scr_file, rec_file

dependencies
  xrandr
  boox / slop
  rofi / dmenu
 screenshots
  shotgun
  xclip
 recording
  ffmpeg
  procps-ng (pkill/pgrep, busybox-compatible)
  notify-send (optional, easy to replace/remove)
EOF
}

# shorthand for checking whether a command exists then running it
# use with subshell for easy alternatives, as 'exec' will replace
# the parent and as such not execute any following commands
ex() {
	command -v "$1" >/dev/null && exec "$@"
}

men() {(
	ex menu "$@"
	ex rofi -dmenu "$@"
	ex dmenu -i "$@"
)}

sel() {(
	# pass an arbitrary argument to format with spaces instead of
	# 200x140+30+50 (the default)
	ex boox ${1:+'%w %h %x %y'}
	ex slop ${1:+-f '%w %h %x %y'}
)}

audio() {
	# find default audio device
	unset var mic
	[ "$1" ] || {
		var=$(ffmpeg -hide_banner -sinks pulse | grep '^\*')
		set -- ${var#\*}
		var=$1.monitor
		mic=$(ffmpeg -hide_banner -sources pulse | grep Antlion_Audio)
	}
	[ "$1" ] || return
	audio="-f pulse -i ${var:-$1}"
	[ "$mic" ] && audio="$audio -f pulse -i alsa_input.usb-Antlion_Audio_Antlion_Wireless_Microphone-00.mono-fallback -filter_complex "\
"amix=inputs=2:duration=first:dropout_transition=1000,volume=1"
}

# list all monitors or a specific one
monitors() {
	# if an arg is provided, use that, else fall back to all monitors
	a=${1:- connected}
	# change definition of a 'word' so parsing is easier
	IFS='x+ '
	# primary is pretty much useless and makes it messier to parse, remove it
	xrandr --current | grep "$a" | sed 's/primary//' | while read -r line; do
		set -- $line
		# %-10s is for alignment
		# args 3-6 are the geometry in whxy, ex: 1920 1080 1366 0
		printf '%-10s%s\n' "$1" "$3 $4 $5 $6"
	done
}

# screenshots
screen() {
	file=${2:-$scr_dir/${scr_file%.png}$3.png}
	shotgun -g "$1"  "$file" &&
		xclip -sel clip -t image/png "$file"
	exit
}



case $1 in
	-S)  var=$(sel); screen "$var"  "$2"  "_${var%%+*}";;
	-G*) screen "${1#??}" "$2";;
	-P)  set -- $(monitors primary) "$2"; shift
	     screen "$1x$2+$3+$4" "$5"
esac

while [ "$1" ]; do
arg=${1#??}
case $1 in
	-h)  help;;

	# recording
	-s)  exec echo "'-s' should be the first argument...";;
	-g*) geometry=$arg;;
	-m*) monitor=$arg;;
	-r*) rate=$arg;;
	-b*) bitrate="-b:v ${arg}M";;
	-p*) profile=$arg;;
	-a*) audio "$arg";;
	-x)	 extra=$2; shift;;
	-c)  confirm=yes;;
	-e)  select=1;;
	-n)  nvenc=\ ;;
	--)  output=$2; break;;
	*)   output=$1; break
esac
shift
done


# procps-ng pgrep has -c, however busybox's doesn't, and procps is way slower
[ "$(pgrep -x "${0##*/}")" != "$$" ] &&
	echo "error: multiple instances running" && exit 1


: load profile
[ "$profile" ] && {
	dir=${XDG_CONFIG_HOME:=$HOME/.config}/scr
	mkdir -p "$dir"
	touch "$dir/$profile"
	. "$dir/$profile"
}

if [ "$geometry" ]; then
	IFS='x+ '
	set -- $geometry
	# allow for only specifying width and height
	set -- $1 $2 ${3:-0} ${4:-0}

elif [ "$select" ]; then
	set -- $(sel arbitrary-argument)

elif [ "$monitor" ]; then
	var=$(monitors "$monitor")
	IFS='x+ '
	set -- $var
	shift

else
	# if no methods are specified, prompt for one
	: method prompting
	var=$(printf "%b\n" "$(monitors)\nselection" | men)
	set -- $var
	case $var in
		selection) select=1; set -- $(sel arbitrary-argument);;
		# save the monitor name (for profiles)
		[a-zA-Z]*) monitor=$1; shift;;
	esac

fi


[ $# != 4 ] && echo "invalid method, exiting" && exit 1

# uneven numbers
set -- $(( $1+($1%2) )) $(( $2+($2%2) )) $3 $4


: nvidia hardware acceleration
[ "$nvenc" ] || {
	ex glxinfo | grep -q nvenc && nvenc='-vcodec h264_nvenc'
}


: save profile
[ "$profile" ] && {
cat << EOF > "$dir/$profile"
bitrate='$bitrate'
rate='$rate'
nvenc='$nvenc'
select='$select'
monitor='$monitor'
profilem=1
EOF
}


: confirmation prompt
[ "$confirm" ] || confirm=$(printf "yes\nno" | men -p "start the recording?")

[ "$confirm" = yes ] && {
	IFS="$oIFS"
	notify-send -t 800 "recording started"
	ffmpeg -y \
		-loglevel error  \
		$audio           \
		-f x11grab       \
		-draw_mouse 1    \
		-s "$1x$2"       \
		-r "${rate:-30}" \
		-i "$DISPLAY.0+$3,$4" \
		-pix_fmt ${pixfmt:-yuv420p} \
		$bitrate         \
		$nvenc           \
		$extra           \
		-q:v 0           \
		"$output" &
	pid=$!
	wait $pid

	notify-send -t 2000 "recording saved"
}
